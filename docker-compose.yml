version: "3.8"

services:
  app:
    build:
      context: .
      target: php
      dockerfile: Dockerfile
    image: php:8.2-fpm
    container_name: app
    user: "1000:1000"
    restart: unless-stopped
    tty: true
    volumes:
      - ./:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./storage:/var/www/storage:cached
      - ./bootstrap/cache:/var/www/bootstrap/cache:cached
    networks:
      - webnet

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    tty: true
    volumes:
      - ./:/var/www
      - ./nginx/conf.d:/etc/nginx/conf.d/
      - /etc/letsencrypt:/etc/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    networks:
      - webnet

  php:
    build:
      context: .
      target: php
      args:
        - APP_ENV=${APP_ENV}
    environment:
      - APP_ENV=${APP_ENV}
      - CONTAINER_ROLE=app
    working_dir: /var/www
    volumes:
      - ./:/var/www
    ports:
      - "8000:8000"
    depends_on:
      - database
      - redis
    networks:
      - webnet

  websocket:
    build:
      context: .
      target: php
      args:
        - APP_ENV=${APP_ENV}
    environment:
      - APP_ENV=${APP_ENV}
      - CONTAINER_ROLE=websocket
    working_dir: /var/www
    volumes:
      - ./:/var/www
    ports:
      - "6001:6001"
    depends_on:
      - database
      - redis
    networks:
      - webnet

  database:
    image: mysql:5.7
    container_name: netprofe_db
    environment:
      - MYSQL_DATABASE=netprofe_db
      - MYSQL_USER=homestead
      - MYSQL_PASSWORD=secret
      - MYSQL_ROOT_PASSWORD=root_password
    ports:
      - "3306:3306"
    networks:
      - webnet
    volumes:
      - db-data:/var/lib/mysql

  redis:
    image: redis:alpine
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    container_name: redis
    ports:
      - "6380:6379"
    networks:
      - webnet

  queue:
    build:
      context: .
      target: php
      args:
        - APP_ENV=${APP_ENV}
    environment:
      - APP_ENV=${APP_ENV}
      - CONTAINER_ROLE=queue
    working_dir: /var/www
    volumes:
      - ./:/var/www
    networks:
      - webnet

  node:
    build:
      context: .
      target: node
    container_name: node
    volumes:
      - .:/usr/src
      - ./node_modules:/usr/src/node_modules
    tty: true
    networks:
      - webnet

  # WireGuard VPN service
  wireguard:
    image: linuxserver/wireguard:v1.0.20210914-ls6
    container_name: wireguard
    cap_add:
      - NET_ADMIN
    volumes:
      - ./config:/config
    ports:
      - "5000:5000"     # WireGuard VPN port
      - "51820:51820"
    networks:
      - webnet
    restart: unless-stopped

  # WireGuard-UI service
  wireguard-ui:
    image: ngoduykhanh/wireguard-ui:latest
    container_name: wireguard-ui
    depends_on:
      - wireguard
    cap_add:
      - NET_ADMIN
    environment:
      - WGUI_USERNAME=admin
      - WGUI_PASSWORD=admin
    volumes:
      - ./db:/app/db
      - ./config:/etc/wireguard
    ports:
      - "5001:5001"
    networks:
      - webnet
    restart: unless-stopped

volumes:
  db-data: ~

networks:
  webnet:
    driver: bridge

