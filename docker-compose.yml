version: '3.8'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: laravel-app
    restart: unless-stopped
    environment:
      APP_NAME: ${APP_NAME}
      APP_ENV: ${APP_ENV}
      APP_KEY: ${APP_KEY}
      APP_DEBUG: ${APP_DEBUG}
      APP_URL: ${APP_URL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      MQTT_HOST: ${MQTT_HOST}
      MQTT_PORT: ${MQTT_PORT}
      MQTT_CLIENT_ID: ${MQTT_CLIENT_ID}
      MQTT_CLEAN_SESSION: ${MQTT_CLEAN_SESSION}
      MQTT_ENABLE_LOGGING: ${MQTT_ENABLE_LOGGING}
      MQTT_AUTH_USERNAME: ${MQTT_AUTH_USERNAME}
      MQTT_AUTH_PASSWORD: ${MQTT_AUTH_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - .:/var/www
    networks:
      - app-network
    depends_on:
      - db
      - redis

  php:
    image: php:8.2-fpm
    build:
      context: .
      target: php
      args:
        - APP_ENV=${APP_ENV}
    environment:
      - APP_ENV=${APP_ENV}
      - CONTAINER_ROLE=app
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./netprofe:/var/www/html/netpro
      - ./public:/var/www/public
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - .:/var/www
      - ./netpro:/usr/share/nginx/html
      - ./public:/var/www/public
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - app
    networks:
      - app-network

  db:
    image: mysql:5.7
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: yes
      MYSQL_DATABASE: ${DB_DATABASE}
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - app-network

  redis:
    image: redis:alpine
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    container_name: redis
    ports:
      - "6380:6379"
    networks:
      - app-network

volumes:
  dbdata:

networks:
  app-network:
    driver: bridge
